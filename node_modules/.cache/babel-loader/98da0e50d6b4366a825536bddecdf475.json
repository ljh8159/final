{"ast":null,"code":"import adjust_lon from '../common/adjust_lon';\nimport { HALF_PI, EPSLN, D2R } from '../constants/values';\nimport mlfn from '../common/mlfn';\nimport e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport asinz from '../common/asinz';\nimport imlfn from '../common/imlfn';\nimport { Geodesic } from 'geographiclib-geodesic';\nexport function init() {\n  this.sin_p12 = Math.sin(this.lat0);\n  this.cos_p12 = Math.cos(this.lat0);\n  this.g = new Geodesic.Geodesic(this.a, this.es / (1 + Math.sqrt(1 - this.es)));\n}\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinphi = Math.sin(p.y);\n  var cosphi = Math.cos(p.y);\n  var dlon = adjust_lon(lon - this.long0);\n  var e0, e1, e2, e3, Mlp, Ml, c, kp, cos_c, lat1, lon1, lat2, lon2, vars, azi1;\n  if (this.sphere) {\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      // North Pole case\n      p.x = this.x0 + this.a * (HALF_PI - lat) * Math.sin(dlon);\n      p.y = this.y0 - this.a * (HALF_PI - lat) * Math.cos(dlon);\n      return p;\n    } else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      // South Pole case\n      p.x = this.x0 + this.a * (HALF_PI + lat) * Math.sin(dlon);\n      p.y = this.y0 + this.a * (HALF_PI + lat) * Math.cos(dlon);\n      return p;\n    } else {\n      // default case\n      cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);\n      c = Math.acos(cos_c);\n      kp = c ? c / Math.sin(c) : 1;\n      p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);\n      p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));\n      return p;\n    }\n  } else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      // North Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);\n      p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);\n      return p;\n    } else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      // South Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);\n      p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);\n      return p;\n    } else {\n      // Default case\n      if (Math.abs(lon) < EPSLN && Math.abs(lat - this.lat0) < EPSLN) {\n        p.x = p.y = 0;\n        return p;\n      }\n      lat1 = this.lat0 / D2R;\n      lon1 = this.long0 / D2R;\n      lat2 = lat / D2R;\n      lon2 = lon / D2R;\n      vars = this.g.Inverse(lat1, lon1, lat2, lon2, this.g.AZIMUTH);\n      azi1 = vars.azi1 * D2R;\n      p.x = vars.s12 * Math.sin(azi1);\n      p.y = vars.s12 * Math.cos(azi1);\n      return p;\n    }\n  }\n}\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M, lat1, lon1, azi1, s12, vars;\n  if (this.sphere) {\n    rh = Math.sqrt(p.x * p.x + p.y * p.y);\n    if (rh > 2 * HALF_PI * this.a) {\n      return;\n    }\n    z = rh / this.a;\n    sinz = Math.sin(z);\n    cosz = Math.cos(z);\n    lon = this.long0;\n    if (Math.abs(rh) <= EPSLN) {\n      lat = this.lat0;\n    } else {\n      lat = asinz(cosz * this.sin_p12 + p.y * sinz * this.cos_p12 / rh);\n      con = Math.abs(this.lat0) - HALF_PI;\n      if (Math.abs(con) <= EPSLN) {\n        if (this.lat0 >= 0) {\n          lon = adjust_lon(this.long0 + Math.atan2(p.x, -p.y));\n        } else {\n          lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n        }\n      } else {\n        /* con = cosz - this.sin_p12 * Math.sin(lat);\n        if ((Math.abs(con) < EPSLN) && (Math.abs(p.x) < EPSLN)) {\n          //no-op, just keep the lon value as is\n        } else {\n          var temp = Math.atan2((p.x * sinz * this.cos_p12), (con * rh));\n          lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz * this.cos_p12), (con * rh)));\n        } */\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));\n      }\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  } else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      // North pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = Mlp - rh;\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, -1 * p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    } else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      // South pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = rh - Mlp;\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    } else {\n      // default case\n      lat1 = this.lat0 / D2R;\n      lon1 = this.long0 / D2R;\n      azi1 = Math.atan2(p.x, p.y) / D2R;\n      s12 = Math.sqrt(p.x * p.x + p.y * p.y);\n      vars = this.g.Direct(lat1, lon1, azi1, s12, this.g.STANDARD);\n      p.x = vars.lon2 * D2R;\n      p.y = vars.lat2 * D2R;\n      return p;\n    }\n  }\n}\nexport var names = ['Azimuthal_Equidistant', 'aeqd'];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};","map":{"version":3,"names":["adjust_lon","HALF_PI","EPSLN","D2R","mlfn","e0fn","e1fn","e2fn","e3fn","asinz","imlfn","Geodesic","init","sin_p12","Math","sin","lat0","cos_p12","cos","g","a","es","sqrt","forward","p","lon","x","lat","y","sinphi","cosphi","dlon","long0","e0","e1","e2","e3","Mlp","Ml","c","kp","cos_c","lat1","lon1","lat2","lon2","vars","azi1","sphere","abs","x0","y0","acos","Inverse","AZIMUTH","s12","inverse","rh","z","sinz","cosz","con","M","atan2","Direct","STANDARD","names"],"sources":["D:/OneDrive/web/test/node_modules/proj4/lib/projections/aeqd.js"],"sourcesContent":["import adjust_lon from '../common/adjust_lon';\nimport { HALF_PI, EPSLN, D2R } from '../constants/values';\nimport mlfn from '../common/mlfn';\nimport e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport asinz from '../common/asinz';\nimport imlfn from '../common/imlfn';\nimport { Geodesic } from 'geographiclib-geodesic';\n\nexport function init() {\n  this.sin_p12 = Math.sin(this.lat0);\n  this.cos_p12 = Math.cos(this.lat0);\n  this.g = new Geodesic.Geodesic(this.a, this.es / (1 + Math.sqrt(1 - this.es)));\n}\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinphi = Math.sin(p.y);\n  var cosphi = Math.cos(p.y);\n  var dlon = adjust_lon(lon - this.long0);\n  var e0, e1, e2, e3, Mlp, Ml, c, kp, cos_c, lat1, lon1, lat2, lon2, vars, azi1;\n  if (this.sphere) {\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      // North Pole case\n      p.x = this.x0 + this.a * (HALF_PI - lat) * Math.sin(dlon);\n      p.y = this.y0 - this.a * (HALF_PI - lat) * Math.cos(dlon);\n      return p;\n    } else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      // South Pole case\n      p.x = this.x0 + this.a * (HALF_PI + lat) * Math.sin(dlon);\n      p.y = this.y0 + this.a * (HALF_PI + lat) * Math.cos(dlon);\n      return p;\n    } else {\n      // default case\n      cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);\n      c = Math.acos(cos_c);\n      kp = c ? c / Math.sin(c) : 1;\n      p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);\n      p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));\n      return p;\n    }\n  } else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      // North Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);\n      p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);\n      return p;\n    } else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      // South Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);\n      p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);\n      return p;\n    } else {\n      // Default case\n      if (Math.abs(lon) < EPSLN && Math.abs(lat - this.lat0) < EPSLN) {\n        p.x = p.y = 0;\n        return p;\n      }\n      lat1 = this.lat0 / D2R;\n      lon1 = this.long0 / D2R;\n      lat2 = lat / D2R;\n      lon2 = lon / D2R;\n\n      vars = this.g.Inverse(lat1, lon1, lat2, lon2, this.g.AZIMUTH);\n      azi1 = vars.azi1 * D2R;\n\n      p.x = vars.s12 * Math.sin(azi1);\n      p.y = vars.s12 * Math.cos(azi1);\n      return p;\n    }\n  }\n}\n\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M, lat1, lon1, azi1, s12, vars;\n  if (this.sphere) {\n    rh = Math.sqrt(p.x * p.x + p.y * p.y);\n    if (rh > (2 * HALF_PI * this.a)) {\n      return;\n    }\n    z = rh / this.a;\n\n    sinz = Math.sin(z);\n    cosz = Math.cos(z);\n\n    lon = this.long0;\n    if (Math.abs(rh) <= EPSLN) {\n      lat = this.lat0;\n    } else {\n      lat = asinz(cosz * this.sin_p12 + (p.y * sinz * this.cos_p12) / rh);\n      con = Math.abs(this.lat0) - HALF_PI;\n      if (Math.abs(con) <= EPSLN) {\n        if (this.lat0 >= 0) {\n          lon = adjust_lon(this.long0 + Math.atan2(p.x, -p.y));\n        } else {\n          lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n        }\n      } else {\n        /* con = cosz - this.sin_p12 * Math.sin(lat);\n        if ((Math.abs(con) < EPSLN) && (Math.abs(p.x) < EPSLN)) {\n          //no-op, just keep the lon value as is\n        } else {\n          var temp = Math.atan2((p.x * sinz * this.cos_p12), (con * rh));\n          lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz * this.cos_p12), (con * rh)));\n        } */\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));\n      }\n    }\n\n    p.x = lon;\n    p.y = lat;\n    return p;\n  } else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      // North pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = Mlp - rh;\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, -1 * p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    } else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      // South pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = rh - Mlp;\n\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    } else {\n      // default case\n      lat1 = this.lat0 / D2R;\n      lon1 = this.long0 / D2R;\n      azi1 = Math.atan2(p.x, p.y) / D2R;\n      s12 = Math.sqrt(p.x * p.x + p.y * p.y);\n      vars = this.g.Direct(lat1, lon1, azi1, s12, this.g.STANDARD);\n\n      p.x = vars.lon2 * D2R;\n      p.y = vars.lat2 * D2R;\n      return p;\n    }\n  }\n}\n\nexport var names = ['Azimuthal_Equidistant', 'aeqd'];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}