{"ast":null,"code":"var _jsxFileName = \"D:\\\\OneDrive\\\\web\\\\test\\\\src\\\\pages\\\\MapPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport styles from '../styles/MapPage.module.css';\nimport proj4 from \"proj4\";\nimport maplibregl from 'maplibre-gl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction geoJsonCoordsToLngLatArray(coords) {\n  // EPSG:3857 정확한 정의\n  const epsg3857 = \"+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs\";\n  const wgs84 = \"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\";\n  return coords[0].map(([x, y]) => {\n    const [lng, lat] = proj4(epsg3857, wgs84, [x, y]);\n    return [lng, lat]; // [경도, 위도]\n  });\n}\nconst MapPage = () => {\n  _s();\n  const mapRef = useRef(null);\n  const [address, setAddress] = useState('');\n  const [image, setImage] = useState(null);\n  useEffect(() => {\n    let map;\n    let floodSourceData = null;\n\n    // 지도 생성\n    map = new maplibregl.Map({\n      container: 'map',\n      style: 'https://basemaps.cartocdn.com/gl/positron-gl-style/style.json',\n      // 무료 OSM 스타일\n      center: [128.3446, 36.1195],\n      zoom: 12\n    });\n    mapRef.current = map;\n    map.on('load', () => {\n      // 침수흔적도 불러오기\n      fetch('/flood/floodmap.json').then(res => res.json()).then(data => {\n        // 좌표 변환 (EPSG:3857 → WGS84)\n        data.features.forEach(feature => {\n          var _feature$geometry;\n          if (((_feature$geometry = feature.geometry) === null || _feature$geometry === void 0 ? void 0 : _feature$geometry.type) === \"Polygon\") {\n            feature.geometry.coordinates = [geoJsonCoordsToLngLatArray(feature.geometry.coordinates)];\n          }\n        });\n        floodSourceData = data;\n        map.addSource('flood', {\n          type: 'geojson',\n          data: floodSourceData\n        });\n        map.addLayer({\n          id: 'flood-layer',\n          type: 'fill',\n          source: 'flood',\n          paint: {\n            'fill-color': ['match', ['get', 'FLDN_GRD'], '1', '#ff0000', '2', '#ff8c00', '3', '#ffff00', '4', '#00c8ff', '5', '#0000ff', '#888888'],\n            'fill-opacity': 0.5,\n            'fill-outline-color': '#333'\n          }\n        });\n      });\n\n      // 기존 마커 불러오기\n      fetch('http://localhost:5000/reports').then(res => res.json()).then(data => {\n        data.forEach(report => {\n          if (report.stage === 3) {\n            new maplibregl.Marker().setLngLat([report.lng, report.lat]).addTo(map);\n          }\n        });\n      });\n\n      // 지도 클릭 시 신고\n      map.on('click', e => {\n        const lngLat = e.lngLat;\n        // 주소 변환 (Nominatim 등 외부 API 필요, 여기선 생략)\n        setAddress(`경도: ${lngLat.lng}, 위도: ${lngLat.lat}`);\n        if (!image) {\n          alert(\"사진을 먼저 업로드 해주세요!\");\n          return;\n        }\n        const timestamp = new Date().toISOString();\n        const formData = new FormData();\n        formData.append('lat', lngLat.lat);\n        formData.append('lng', lngLat.lng);\n        formData.append('address', `경도: ${lngLat.lng}, 위도: ${lngLat.lat}`);\n        formData.append('timestamp', timestamp);\n        formData.append('image', image);\n        fetch('http://localhost:5000/report', {\n          method: 'POST',\n          body: formData\n        }).then(res => res.json()).then(data => {\n          alert(data.message);\n          if (data.status === \"accept\") {\n            new maplibregl.Marker().setLngLat([lngLat.lng, lngLat.lat]).addTo(map);\n          }\n          if (data.status === \"redirect\") {\n            window.open(\"https://www.safekorea.go.kr/\", \"_blank\");\n          }\n        });\n      });\n    });\n    return () => {\n      if (map) map.remove();\n    };\n    // eslint-disable-next-line\n  }, [image]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: styles.title,\n      children: \"\\uD83D\\uDCCD \\uB3C4\\uB85C\\uB6AB\\uC774\\uB2E8 - \\uD558\\uC218\\uAD6C \\uC9C0\\uB3C4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"\\uC0AC\\uC9C4 \\uC5C5\\uB85C\\uB4DC:\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: e => setImage(e.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.mapArea,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"map\",\n        style: {\n          width: '100%',\n          height: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\uD83D\\uDDFA\\uFE0F \\uD604\\uC7AC \\uD074\\uB9AD\\uD55C \\uC8FC\\uC18C: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: address\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n_s(MapPage, \"n8VMrVHAli18vx4H6PDsgwjJxPc=\");\n_c = MapPage;\nexport default MapPage;\nvar _c;\n$RefreshReg$(_c, \"MapPage\");","map":{"version":3,"names":["React","useEffect","useRef","useState","styles","proj4","maplibregl","jsxDEV","_jsxDEV","geoJsonCoordsToLngLatArray","coords","epsg3857","wgs84","map","x","y","lng","lat","MapPage","_s","mapRef","address","setAddress","image","setImage","floodSourceData","Map","container","style","center","zoom","current","on","fetch","then","res","json","data","features","forEach","feature","_feature$geometry","geometry","type","coordinates","addSource","addLayer","id","source","paint","report","stage","Marker","setLngLat","addTo","e","lngLat","alert","timestamp","Date","toISOString","formData","FormData","append","method","body","message","status","window","open","remove","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","target","files","mapArea","width","height","_c","$RefreshReg$"],"sources":["D:/OneDrive/web/test/src/pages/MapPage.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport styles from '../styles/MapPage.module.css';\r\nimport proj4 from \"proj4\";\r\nimport maplibregl from 'maplibre-gl';\r\n\r\nfunction geoJsonCoordsToLngLatArray(coords) {\r\n  // EPSG:3857 정확한 정의\r\n  const epsg3857 = \"+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs\";\r\n  const wgs84 = \"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\";\r\n  return coords[0].map(([x, y]) => {\r\n    const [lng, lat] = proj4(epsg3857, wgs84, [x, y]);\r\n    return [lng, lat]; // [경도, 위도]\r\n  });\r\n}\r\n\r\nconst MapPage = () => {\r\n  const mapRef = useRef(null);\r\n  const [address, setAddress] = useState('');\r\n  const [image, setImage] = useState(null);\r\n\r\n  useEffect(() => {\r\n    let map;\r\n    let floodSourceData = null;\r\n\r\n    // 지도 생성\r\n    map = new maplibregl.Map({\r\n      container: 'map',\r\n      style: 'https://basemaps.cartocdn.com/gl/positron-gl-style/style.json', // 무료 OSM 스타일\r\n      center: [128.3446, 36.1195],\r\n      zoom: 12\r\n    });\r\n    mapRef.current = map;\r\n\r\n    map.on('load', () => {\r\n      // 침수흔적도 불러오기\r\n      fetch('/flood/floodmap.json')\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          // 좌표 변환 (EPSG:3857 → WGS84)\r\n          data.features.forEach(feature => {\r\n            if (feature.geometry?.type === \"Polygon\") {\r\n              feature.geometry.coordinates = [\r\n                geoJsonCoordsToLngLatArray(feature.geometry.coordinates)\r\n              ];\r\n            }\r\n          });\r\n          floodSourceData = data;\r\n\r\n          map.addSource('flood', {\r\n            type: 'geojson',\r\n            data: floodSourceData\r\n          });\r\n\r\n          map.addLayer({\r\n            id: 'flood-layer',\r\n            type: 'fill',\r\n            source: 'flood',\r\n            paint: {\r\n              'fill-color': [\r\n                'match',\r\n                ['get', 'FLDN_GRD'],\r\n                '1', '#ff0000',\r\n                '2', '#ff8c00',\r\n                '3', '#ffff00',\r\n                '4', '#00c8ff',\r\n                '5', '#0000ff',\r\n                '#888888'\r\n              ],\r\n              'fill-opacity': 0.5,\r\n              'fill-outline-color': '#333'\r\n            }\r\n          });\r\n        });\r\n\r\n      // 기존 마커 불러오기\r\n      fetch('http://localhost:5000/reports')\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          data.forEach(report => {\r\n            if (report.stage === 3) {\r\n              new maplibregl.Marker()\r\n                .setLngLat([report.lng, report.lat])\r\n                .addTo(map);\r\n            }\r\n          });\r\n        });\r\n\r\n      // 지도 클릭 시 신고\r\n      map.on('click', (e) => {\r\n        const lngLat = e.lngLat;\r\n        // 주소 변환 (Nominatim 등 외부 API 필요, 여기선 생략)\r\n        setAddress(`경도: ${lngLat.lng}, 위도: ${lngLat.lat}`);\r\n\r\n        if (!image) {\r\n          alert(\"사진을 먼저 업로드 해주세요!\");\r\n          return;\r\n        }\r\n\r\n        const timestamp = new Date().toISOString();\r\n        const formData = new FormData();\r\n        formData.append('lat', lngLat.lat);\r\n        formData.append('lng', lngLat.lng);\r\n        formData.append('address', `경도: ${lngLat.lng}, 위도: ${lngLat.lat}`);\r\n        formData.append('timestamp', timestamp);\r\n        formData.append('image', image);\r\n\r\n        fetch('http://localhost:5000/report', {\r\n          method: 'POST',\r\n          body: formData\r\n        })\r\n          .then(res => res.json())\r\n          .then(data => {\r\n            alert(data.message);\r\n            if (data.status === \"accept\") {\r\n              new maplibregl.Marker()\r\n                .setLngLat([lngLat.lng, lngLat.lat])\r\n                .addTo(map);\r\n            }\r\n            if (data.status === \"redirect\") {\r\n              window.open(\"https://www.safekorea.go.kr/\", \"_blank\");\r\n            }\r\n          });\r\n      });\r\n    });\r\n\r\n    return () => {\r\n      if (map) map.remove();\r\n    };\r\n    // eslint-disable-next-line\r\n  }, [image]);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <h2 className={styles.title}>📍 도로뚫이단 - 하수구 지도</h2>\r\n      <label>\r\n        사진 업로드:&nbsp;\r\n        <input\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          onChange={e => setImage(e.target.files[0])}\r\n        />\r\n      </label>\r\n      <div className={styles.mapArea}>\r\n        <div id=\"map\" style={{ width: '100%', height: '100%' }}></div>\r\n      </div>\r\n      <p>🗺️ 현재 클릭한 주소: <strong>{address}</strong></p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,8BAA8B;AACjD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,SAASC,0BAA0BA,CAACC,MAAM,EAAE;EAC1C;EACA,MAAMC,QAAQ,GAAG,gHAAgH;EACjI,MAAMC,KAAK,GAAG,kDAAkD;EAChE,OAAOF,MAAM,CAAC,CAAC,CAAC,CAACG,GAAG,CAAC,CAAC,CAACC,CAAC,EAAEC,CAAC,CAAC,KAAK;IAC/B,MAAM,CAACC,GAAG,EAAEC,GAAG,CAAC,GAAGZ,KAAK,CAACM,QAAQ,EAAEC,KAAK,EAAE,CAACE,CAAC,EAAEC,CAAC,CAAC,CAAC;IACjD,OAAO,CAACC,GAAG,EAAEC,GAAG,CAAC,CAAC,CAAC;EACrB,CAAC,CAAC;AACJ;AAEA,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAMC,MAAM,GAAGlB,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAM,CAACmB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAExCF,SAAS,CAAC,MAAM;IACd,IAAIY,GAAG;IACP,IAAIY,eAAe,GAAG,IAAI;;IAE1B;IACAZ,GAAG,GAAG,IAAIP,UAAU,CAACoB,GAAG,CAAC;MACvBC,SAAS,EAAE,KAAK;MAChBC,KAAK,EAAE,+DAA+D;MAAE;MACxEC,MAAM,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC;MAC3BC,IAAI,EAAE;IACR,CAAC,CAAC;IACFV,MAAM,CAACW,OAAO,GAAGlB,GAAG;IAEpBA,GAAG,CAACmB,EAAE,CAAC,MAAM,EAAE,MAAM;MACnB;MACAC,KAAK,CAAC,sBAAsB,CAAC,CAC1BC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAI;QACZ;QACAA,IAAI,CAACC,QAAQ,CAACC,OAAO,CAACC,OAAO,IAAI;UAAA,IAAAC,iBAAA;UAC/B,IAAI,EAAAA,iBAAA,GAAAD,OAAO,CAACE,QAAQ,cAAAD,iBAAA,uBAAhBA,iBAAA,CAAkBE,IAAI,MAAK,SAAS,EAAE;YACxCH,OAAO,CAACE,QAAQ,CAACE,WAAW,GAAG,CAC7BnC,0BAA0B,CAAC+B,OAAO,CAACE,QAAQ,CAACE,WAAW,CAAC,CACzD;UACH;QACF,CAAC,CAAC;QACFnB,eAAe,GAAGY,IAAI;QAEtBxB,GAAG,CAACgC,SAAS,CAAC,OAAO,EAAE;UACrBF,IAAI,EAAE,SAAS;UACfN,IAAI,EAAEZ;QACR,CAAC,CAAC;QAEFZ,GAAG,CAACiC,QAAQ,CAAC;UACXC,EAAE,EAAE,aAAa;UACjBJ,IAAI,EAAE,MAAM;UACZK,MAAM,EAAE,OAAO;UACfC,KAAK,EAAE;YACL,YAAY,EAAE,CACZ,OAAO,EACP,CAAC,KAAK,EAAE,UAAU,CAAC,EACnB,GAAG,EAAE,SAAS,EACd,GAAG,EAAE,SAAS,EACd,GAAG,EAAE,SAAS,EACd,GAAG,EAAE,SAAS,EACd,GAAG,EAAE,SAAS,EACd,SAAS,CACV;YACD,cAAc,EAAE,GAAG;YACnB,oBAAoB,EAAE;UACxB;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;;MAEJ;MACAhB,KAAK,CAAC,+BAA+B,CAAC,CACnCC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAI;QACZA,IAAI,CAACE,OAAO,CAACW,MAAM,IAAI;UACrB,IAAIA,MAAM,CAACC,KAAK,KAAK,CAAC,EAAE;YACtB,IAAI7C,UAAU,CAAC8C,MAAM,CAAC,CAAC,CACpBC,SAAS,CAAC,CAACH,MAAM,CAAClC,GAAG,EAAEkC,MAAM,CAACjC,GAAG,CAAC,CAAC,CACnCqC,KAAK,CAACzC,GAAG,CAAC;UACf;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;;MAEJ;MACAA,GAAG,CAACmB,EAAE,CAAC,OAAO,EAAGuB,CAAC,IAAK;QACrB,MAAMC,MAAM,GAAGD,CAAC,CAACC,MAAM;QACvB;QACAlC,UAAU,CAAC,OAAOkC,MAAM,CAACxC,GAAG,SAASwC,MAAM,CAACvC,GAAG,EAAE,CAAC;QAElD,IAAI,CAACM,KAAK,EAAE;UACVkC,KAAK,CAAC,kBAAkB,CAAC;UACzB;QACF;QAEA,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QAC1C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;QAC/BD,QAAQ,CAACE,MAAM,CAAC,KAAK,EAAEP,MAAM,CAACvC,GAAG,CAAC;QAClC4C,QAAQ,CAACE,MAAM,CAAC,KAAK,EAAEP,MAAM,CAACxC,GAAG,CAAC;QAClC6C,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAE,OAAOP,MAAM,CAACxC,GAAG,SAASwC,MAAM,CAACvC,GAAG,EAAE,CAAC;QAClE4C,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEL,SAAS,CAAC;QACvCG,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAExC,KAAK,CAAC;QAE/BU,KAAK,CAAC,8BAA8B,EAAE;UACpC+B,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEJ;QACR,CAAC,CAAC,CACC3B,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAI;UACZoB,KAAK,CAACpB,IAAI,CAAC6B,OAAO,CAAC;UACnB,IAAI7B,IAAI,CAAC8B,MAAM,KAAK,QAAQ,EAAE;YAC5B,IAAI7D,UAAU,CAAC8C,MAAM,CAAC,CAAC,CACpBC,SAAS,CAAC,CAACG,MAAM,CAACxC,GAAG,EAAEwC,MAAM,CAACvC,GAAG,CAAC,CAAC,CACnCqC,KAAK,CAACzC,GAAG,CAAC;UACf;UACA,IAAIwB,IAAI,CAAC8B,MAAM,KAAK,UAAU,EAAE;YAC9BC,MAAM,CAACC,IAAI,CAAC,8BAA8B,EAAE,QAAQ,CAAC;UACvD;QACF,CAAC,CAAC;MACN,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO,MAAM;MACX,IAAIxD,GAAG,EAAEA,GAAG,CAACyD,MAAM,CAAC,CAAC;IACvB,CAAC;IACD;EACF,CAAC,EAAE,CAAC/C,KAAK,CAAC,CAAC;EAEX,oBACEf,OAAA;IAAK+D,SAAS,EAAEnE,MAAM,CAACuB,SAAU;IAAA6C,QAAA,gBAC/BhE,OAAA;MAAI+D,SAAS,EAAEnE,MAAM,CAACqE,KAAM;MAAAD,QAAA,EAAC;IAAiB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnDrE,OAAA;MAAAgE,QAAA,GAAO,sCAEL,eAAAhE,OAAA;QACEmC,IAAI,EAAC,MAAM;QACXmC,MAAM,EAAC,SAAS;QAChBC,QAAQ,EAAExB,CAAC,IAAI/B,QAAQ,CAAC+B,CAAC,CAACyB,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC,eACRrE,OAAA;MAAK+D,SAAS,EAAEnE,MAAM,CAAC8E,OAAQ;MAAAV,QAAA,eAC7BhE,OAAA;QAAKuC,EAAE,EAAC,KAAK;QAACnB,KAAK,EAAE;UAAEuD,KAAK,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAO;MAAE;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3D,CAAC,eACNrE,OAAA;MAAAgE,QAAA,GAAG,mEAAe,eAAAhE,OAAA;QAAAgE,QAAA,EAASnD;MAAO;QAAAqD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEV,CAAC;AAAC1D,EAAA,CArIID,OAAO;AAAAmE,EAAA,GAAPnE,OAAO;AAuIb,eAAeA,OAAO;AAAC,IAAAmE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}