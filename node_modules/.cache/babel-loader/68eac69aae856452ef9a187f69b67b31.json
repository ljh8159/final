{"ast":null,"code":"import PROJJSONBuilderBase from './PROJJSONBuilderBase.js';\nclass PROJJSONBuilder2019 extends PROJJSONBuilderBase {\n  static convert(node, result = {}) {\n    super.convert(node, result);\n\n    // Handle `CS` node for WKT2-2019\n    const csNode = node.find(child => Array.isArray(child) && child[0] === 'CS');\n    if (csNode) {\n      result.coordinate_system = {\n        subtype: csNode[1],\n        axis: this.extractAxes(node)\n      };\n    }\n\n    // Handle `USAGE` node for WKT2-2019\n    const usageNode = node.find(child => Array.isArray(child) && child[0] === 'USAGE');\n    if (usageNode) {\n      const scope = usageNode.find(child => Array.isArray(child) && child[0] === 'SCOPE');\n      const area = usageNode.find(child => Array.isArray(child) && child[0] === 'AREA');\n      const bbox = usageNode.find(child => Array.isArray(child) && child[0] === 'BBOX');\n      result.usage = {};\n      if (scope) {\n        result.usage.scope = scope[1];\n      }\n      if (area) {\n        result.usage.area = area[1];\n      }\n      if (bbox) {\n        result.usage.bbox = bbox.slice(1);\n      }\n    }\n    return result;\n  }\n}\nexport default PROJJSONBuilder2019;","map":{"version":3,"names":["PROJJSONBuilderBase","PROJJSONBuilder2019","convert","node","result","csNode","find","child","Array","isArray","coordinate_system","subtype","axis","extractAxes","usageNode","scope","area","bbox","usage","slice"],"sources":["D:/OneDrive/web/test/node_modules/wkt-parser/PROJJSONBuilder2019.js"],"sourcesContent":["import PROJJSONBuilderBase from './PROJJSONBuilderBase.js';\n\nclass PROJJSONBuilder2019 extends PROJJSONBuilderBase {\n  static convert(node, result = {}) {\n    super.convert(node, result);\n\n    // Handle `CS` node for WKT2-2019\n    const csNode = node.find((child) => Array.isArray(child) && child[0] === 'CS');\n    if (csNode) {\n      result.coordinate_system = {\n        subtype: csNode[1],\n        axis: this.extractAxes(node),\n      };\n    }\n\n    // Handle `USAGE` node for WKT2-2019\n    const usageNode = node.find((child) => Array.isArray(child) && child[0] === 'USAGE');\n    if (usageNode) {\n      const scope = usageNode.find((child) => Array.isArray(child) && child[0] === 'SCOPE');\n      const area = usageNode.find((child) => Array.isArray(child) && child[0] === 'AREA');\n      const bbox = usageNode.find((child) => Array.isArray(child) && child[0] === 'BBOX');\n      result.usage = {};\n      if (scope) {\n        result.usage.scope = scope[1];\n      }\n      if (area) {\n        result.usage.area = area[1];\n      }\n      if (bbox) {\n        result.usage.bbox = bbox.slice(1);\n      }\n    }\n\n    return result;\n  }\n}\n\nexport default PROJJSONBuilder2019;"],"mappings":"AAAA,OAAOA,mBAAmB,MAAM,0BAA0B;AAE1D,MAAMC,mBAAmB,SAASD,mBAAmB,CAAC;EACpD,OAAOE,OAAOA,CAACC,IAAI,EAAEC,MAAM,GAAG,CAAC,CAAC,EAAE;IAChC,KAAK,CAACF,OAAO,CAACC,IAAI,EAAEC,MAAM,CAAC;;IAE3B;IACA,MAAMC,MAAM,GAAGF,IAAI,CAACG,IAAI,CAAEC,KAAK,IAAKC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC;IAC9E,IAAIF,MAAM,EAAE;MACVD,MAAM,CAACM,iBAAiB,GAAG;QACzBC,OAAO,EAAEN,MAAM,CAAC,CAAC,CAAC;QAClBO,IAAI,EAAE,IAAI,CAACC,WAAW,CAACV,IAAI;MAC7B,CAAC;IACH;;IAEA;IACA,MAAMW,SAAS,GAAGX,IAAI,CAACG,IAAI,CAAEC,KAAK,IAAKC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC;IACpF,IAAIO,SAAS,EAAE;MACb,MAAMC,KAAK,GAAGD,SAAS,CAACR,IAAI,CAAEC,KAAK,IAAKC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC;MACrF,MAAMS,IAAI,GAAGF,SAAS,CAACR,IAAI,CAAEC,KAAK,IAAKC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC;MACnF,MAAMU,IAAI,GAAGH,SAAS,CAACR,IAAI,CAAEC,KAAK,IAAKC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC;MACnFH,MAAM,CAACc,KAAK,GAAG,CAAC,CAAC;MACjB,IAAIH,KAAK,EAAE;QACTX,MAAM,CAACc,KAAK,CAACH,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC;MAC/B;MACA,IAAIC,IAAI,EAAE;QACRZ,MAAM,CAACc,KAAK,CAACF,IAAI,GAAGA,IAAI,CAAC,CAAC,CAAC;MAC7B;MACA,IAAIC,IAAI,EAAE;QACRb,MAAM,CAACc,KAAK,CAACD,IAAI,GAAGA,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC;MACnC;IACF;IAEA,OAAOf,MAAM;EACf;AACF;AAEA,eAAeH,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module"}