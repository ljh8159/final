{"ast":null,"code":"/**\n * Resources for details of NTv2 file formats:\n * - https://web.archive.org/web/20140127204822if_/http://www.mgs.gov.on.ca:80/stdprodconsume/groups/content/@mgs/@iandit/documents/resourcelist/stel02_047447.pdf\n * - http://mimaka.com/help/gs/html/004_NTV2%20Data%20Format.htm\n */\n\nvar loadedNadgrids = {};\n\n/**\n * Load either a NTv2 file (.gsb) or a Geotiff (.tif) to a key that can be used in a proj string like +nadgrids=<key>. Pass the NTv2 file\n * as an ArrayBuffer. Pass Geotiff as a GeoTIFF instance from the geotiff.js library.\n */\nexport default function nadgrid(key, data, options) {\n  if (data instanceof ArrayBuffer) {\n    return readNTV2Grid(key, data, options);\n  }\n  return {\n    ready: readGeotiffGrid(key, data)\n  };\n}\nfunction readNTV2Grid(key, data, options) {\n  var includeErrorFields = true;\n  if (options !== undefined && options.includeErrorFields === false) {\n    includeErrorFields = false;\n  }\n  var view = new DataView(data);\n  var isLittleEndian = detectLittleEndian(view);\n  var header = readHeader(view, isLittleEndian);\n  var subgrids = readSubgrids(view, header, isLittleEndian, includeErrorFields);\n  var nadgrid = {\n    header: header,\n    subgrids: subgrids\n  };\n  loadedNadgrids[key] = nadgrid;\n  return nadgrid;\n}\nasync function readGeotiffGrid(key, tiff) {\n  var subgrids = [];\n  var subGridCount = await tiff.getImageCount();\n  // proj produced tiff grid shift files appear to organize lower res subgrids first, higher res/ child subgrids last.\n  for (var subgridIndex = subGridCount - 1; subgridIndex >= 0; subgridIndex--) {\n    var image = await tiff.getImage(subgridIndex);\n    var rasters = await image.readRasters();\n    var data = rasters;\n    var lim = [image.getWidth(), image.getHeight()];\n    var imageBBoxRadians = image.getBoundingBox().map(degreesToRadians);\n    var del = [image.fileDirectory.ModelPixelScale[0], image.fileDirectory.ModelPixelScale[1]].map(degreesToRadians);\n    var maxX = imageBBoxRadians[0] + (lim[0] - 1) * del[0];\n    var minY = imageBBoxRadians[3] - (lim[1] - 1) * del[1];\n    var latitudeOffsetBand = data[0];\n    var longitudeOffsetBand = data[1];\n    var nodes = [];\n    for (let i = lim[1] - 1; i >= 0; i--) {\n      for (let j = lim[0] - 1; j >= 0; j--) {\n        var index = i * lim[0] + j;\n        nodes.push([-secondsToRadians(longitudeOffsetBand[index]), secondsToRadians(latitudeOffsetBand[index])]);\n      }\n    }\n    subgrids.push({\n      del: del,\n      lim: lim,\n      ll: [-maxX, minY],\n      cvs: nodes\n    });\n  }\n  var tifGrid = {\n    header: {\n      nSubgrids: subGridCount\n    },\n    subgrids: subgrids\n  };\n  loadedNadgrids[key] = tifGrid;\n  return tifGrid;\n}\n;\n\n/**\n * Given a proj4 value for nadgrids, return an array of loaded grids\n */\nexport function getNadgrids(nadgrids) {\n  // Format details: http://proj.maptools.org/gen_parms.html\n  if (nadgrids === undefined) {\n    return null;\n  }\n  var grids = nadgrids.split(',');\n  return grids.map(parseNadgridString);\n}\nfunction parseNadgridString(value) {\n  if (value.length === 0) {\n    return null;\n  }\n  var optional = value[0] === '@';\n  if (optional) {\n    value = value.slice(1);\n  }\n  if (value === 'null') {\n    return {\n      name: 'null',\n      mandatory: !optional,\n      grid: null,\n      isNull: true\n    };\n  }\n  return {\n    name: value,\n    mandatory: !optional,\n    grid: loadedNadgrids[value] || null,\n    isNull: false\n  };\n}\nfunction degreesToRadians(degrees) {\n  return degrees * Math.PI / 180;\n}\nfunction secondsToRadians(seconds) {\n  return seconds / 3600 * Math.PI / 180;\n}\nfunction detectLittleEndian(view) {\n  var nFields = view.getInt32(8, false);\n  if (nFields === 11) {\n    return false;\n  }\n  nFields = view.getInt32(8, true);\n  if (nFields !== 11) {\n    console.warn('Failed to detect nadgrid endian-ness, defaulting to little-endian');\n  }\n  return true;\n}\nfunction readHeader(view, isLittleEndian) {\n  return {\n    nFields: view.getInt32(8, isLittleEndian),\n    nSubgridFields: view.getInt32(24, isLittleEndian),\n    nSubgrids: view.getInt32(40, isLittleEndian),\n    shiftType: decodeString(view, 56, 56 + 8).trim(),\n    fromSemiMajorAxis: view.getFloat64(120, isLittleEndian),\n    fromSemiMinorAxis: view.getFloat64(136, isLittleEndian),\n    toSemiMajorAxis: view.getFloat64(152, isLittleEndian),\n    toSemiMinorAxis: view.getFloat64(168, isLittleEndian)\n  };\n}\nfunction decodeString(view, start, end) {\n  return String.fromCharCode.apply(null, new Uint8Array(view.buffer.slice(start, end)));\n}\nfunction readSubgrids(view, header, isLittleEndian, includeErrorFields) {\n  var gridOffset = 176;\n  var grids = [];\n  for (var i = 0; i < header.nSubgrids; i++) {\n    var subHeader = readGridHeader(view, gridOffset, isLittleEndian);\n    var nodes = readGridNodes(view, gridOffset, subHeader, isLittleEndian, includeErrorFields);\n    var lngColumnCount = Math.round(1 + (subHeader.upperLongitude - subHeader.lowerLongitude) / subHeader.longitudeInterval);\n    var latColumnCount = Math.round(1 + (subHeader.upperLatitude - subHeader.lowerLatitude) / subHeader.latitudeInterval);\n    // Proj4 operates on radians whereas the coordinates are in seconds in the grid\n    grids.push({\n      ll: [secondsToRadians(subHeader.lowerLongitude), secondsToRadians(subHeader.lowerLatitude)],\n      del: [secondsToRadians(subHeader.longitudeInterval), secondsToRadians(subHeader.latitudeInterval)],\n      lim: [lngColumnCount, latColumnCount],\n      count: subHeader.gridNodeCount,\n      cvs: mapNodes(nodes)\n    });\n    var rowSize = 16;\n    if (includeErrorFields === false) {\n      rowSize = 8;\n    }\n    gridOffset += 176 + subHeader.gridNodeCount * rowSize;\n  }\n  return grids;\n}\n\n/**\n * @param {*} nodes\n * @returns Array<Array<number>>\n */\nfunction mapNodes(nodes) {\n  return nodes.map(function (r) {\n    return [secondsToRadians(r.longitudeShift), secondsToRadians(r.latitudeShift)];\n  });\n}\nfunction readGridHeader(view, offset, isLittleEndian) {\n  return {\n    name: decodeString(view, offset + 8, offset + 16).trim(),\n    parent: decodeString(view, offset + 24, offset + 24 + 8).trim(),\n    lowerLatitude: view.getFloat64(offset + 72, isLittleEndian),\n    upperLatitude: view.getFloat64(offset + 88, isLittleEndian),\n    lowerLongitude: view.getFloat64(offset + 104, isLittleEndian),\n    upperLongitude: view.getFloat64(offset + 120, isLittleEndian),\n    latitudeInterval: view.getFloat64(offset + 136, isLittleEndian),\n    longitudeInterval: view.getFloat64(offset + 152, isLittleEndian),\n    gridNodeCount: view.getInt32(offset + 168, isLittleEndian)\n  };\n}\nfunction readGridNodes(view, offset, gridHeader, isLittleEndian, includeErrorFields) {\n  var nodesOffset = offset + 176;\n  var gridRecordLength = 16;\n  if (includeErrorFields === false) {\n    gridRecordLength = 8;\n  }\n  var gridShiftRecords = [];\n  for (var i = 0; i < gridHeader.gridNodeCount; i++) {\n    var record = {\n      latitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength, isLittleEndian),\n      longitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength + 4, isLittleEndian)\n    };\n    if (includeErrorFields !== false) {\n      record.latitudeAccuracy = view.getFloat32(nodesOffset + i * gridRecordLength + 8, isLittleEndian);\n      record.longitudeAccuracy = view.getFloat32(nodesOffset + i * gridRecordLength + 12, isLittleEndian);\n    }\n    gridShiftRecords.push(record);\n  }\n  return gridShiftRecords;\n}","map":{"version":3,"names":["loadedNadgrids","nadgrid","key","data","options","ArrayBuffer","readNTV2Grid","ready","readGeotiffGrid","includeErrorFields","undefined","view","DataView","isLittleEndian","detectLittleEndian","header","readHeader","subgrids","readSubgrids","tiff","subGridCount","getImageCount","subgridIndex","image","getImage","rasters","readRasters","lim","getWidth","getHeight","imageBBoxRadians","getBoundingBox","map","degreesToRadians","del","fileDirectory","ModelPixelScale","maxX","minY","latitudeOffsetBand","longitudeOffsetBand","nodes","i","j","index","push","secondsToRadians","ll","cvs","tifGrid","nSubgrids","getNadgrids","nadgrids","grids","split","parseNadgridString","value","length","optional","slice","name","mandatory","grid","isNull","degrees","Math","PI","seconds","nFields","getInt32","console","warn","nSubgridFields","shiftType","decodeString","trim","fromSemiMajorAxis","getFloat64","fromSemiMinorAxis","toSemiMajorAxis","toSemiMinorAxis","start","end","String","fromCharCode","apply","Uint8Array","buffer","gridOffset","subHeader","readGridHeader","readGridNodes","lngColumnCount","round","upperLongitude","lowerLongitude","longitudeInterval","latColumnCount","upperLatitude","lowerLatitude","latitudeInterval","count","gridNodeCount","mapNodes","rowSize","r","longitudeShift","latitudeShift","offset","parent","gridHeader","nodesOffset","gridRecordLength","gridShiftRecords","record","getFloat32","latitudeAccuracy","longitudeAccuracy"],"sources":["D:/OneDrive/web/test/node_modules/proj4/lib/nadgrid.js"],"sourcesContent":["/**\n * Resources for details of NTv2 file formats:\n * - https://web.archive.org/web/20140127204822if_/http://www.mgs.gov.on.ca:80/stdprodconsume/groups/content/@mgs/@iandit/documents/resourcelist/stel02_047447.pdf\n * - http://mimaka.com/help/gs/html/004_NTV2%20Data%20Format.htm\n */\n\nvar loadedNadgrids = {};\n\n/**\n * Load either a NTv2 file (.gsb) or a Geotiff (.tif) to a key that can be used in a proj string like +nadgrids=<key>. Pass the NTv2 file\n * as an ArrayBuffer. Pass Geotiff as a GeoTIFF instance from the geotiff.js library.\n */\nexport default function nadgrid(key, data, options) {\n  if (data instanceof ArrayBuffer) {\n    return readNTV2Grid(key, data, options);\n  }\n  return { ready: readGeotiffGrid(key, data) };\n}\n\nfunction readNTV2Grid(key, data, options) {\n  var includeErrorFields = true;\n  if (options !== undefined && options.includeErrorFields === false) {\n    includeErrorFields = false;\n  }\n  var view = new DataView(data);\n  var isLittleEndian = detectLittleEndian(view);\n  var header = readHeader(view, isLittleEndian);\n  var subgrids = readSubgrids(view, header, isLittleEndian, includeErrorFields);\n  var nadgrid = { header: header, subgrids: subgrids };\n  loadedNadgrids[key] = nadgrid;\n  return nadgrid;\n}\n\nasync function readGeotiffGrid(key, tiff) {\n  var subgrids = [];\n  var subGridCount = await tiff.getImageCount();\n  // proj produced tiff grid shift files appear to organize lower res subgrids first, higher res/ child subgrids last.\n  for (var subgridIndex = subGridCount - 1; subgridIndex >= 0; subgridIndex--) {\n    var image = await tiff.getImage(subgridIndex);\n\n    var rasters = await image.readRasters();\n    var data = rasters;\n    var lim = [image.getWidth(), image.getHeight()];\n    var imageBBoxRadians = image.getBoundingBox().map(degreesToRadians);\n    var del = [image.fileDirectory.ModelPixelScale[0], image.fileDirectory.ModelPixelScale[1]].map(degreesToRadians);\n\n    var maxX = imageBBoxRadians[0] + (lim[0] - 1) * del[0];\n    var minY = imageBBoxRadians[3] - (lim[1] - 1) * del[1];\n\n    var latitudeOffsetBand = data[0];\n    var longitudeOffsetBand = data[1];\n    var nodes = [];\n\n    for (let i = lim[1] - 1; i >= 0; i--) {\n      for (let j = lim[0] - 1; j >= 0; j--) {\n        var index = i * lim[0] + j;\n        nodes.push([-secondsToRadians(longitudeOffsetBand[index]), secondsToRadians(latitudeOffsetBand[index])]);\n      }\n    }\n\n    subgrids.push({\n      del: del,\n      lim: lim,\n      ll: [-maxX, minY],\n      cvs: nodes\n    });\n  }\n\n  var tifGrid = {\n    header: {\n      nSubgrids: subGridCount\n    },\n    subgrids: subgrids\n  };\n  loadedNadgrids[key] = tifGrid;\n  return tifGrid;\n};\n\n/**\n * Given a proj4 value for nadgrids, return an array of loaded grids\n */\nexport function getNadgrids(nadgrids) {\n  // Format details: http://proj.maptools.org/gen_parms.html\n  if (nadgrids === undefined) {\n    return null;\n  }\n  var grids = nadgrids.split(',');\n  return grids.map(parseNadgridString);\n}\n\nfunction parseNadgridString(value) {\n  if (value.length === 0) {\n    return null;\n  }\n  var optional = value[0] === '@';\n  if (optional) {\n    value = value.slice(1);\n  }\n  if (value === 'null') {\n    return { name: 'null', mandatory: !optional, grid: null, isNull: true };\n  }\n  return {\n    name: value,\n    mandatory: !optional,\n    grid: loadedNadgrids[value] || null,\n    isNull: false\n  };\n}\n\nfunction degreesToRadians(degrees) {\n  return (degrees) * Math.PI / 180;\n}\n\nfunction secondsToRadians(seconds) {\n  return (seconds / 3600) * Math.PI / 180;\n}\n\nfunction detectLittleEndian(view) {\n  var nFields = view.getInt32(8, false);\n  if (nFields === 11) {\n    return false;\n  }\n  nFields = view.getInt32(8, true);\n  if (nFields !== 11) {\n    console.warn('Failed to detect nadgrid endian-ness, defaulting to little-endian');\n  }\n  return true;\n}\n\nfunction readHeader(view, isLittleEndian) {\n  return {\n    nFields: view.getInt32(8, isLittleEndian),\n    nSubgridFields: view.getInt32(24, isLittleEndian),\n    nSubgrids: view.getInt32(40, isLittleEndian),\n    shiftType: decodeString(view, 56, 56 + 8).trim(),\n    fromSemiMajorAxis: view.getFloat64(120, isLittleEndian),\n    fromSemiMinorAxis: view.getFloat64(136, isLittleEndian),\n    toSemiMajorAxis: view.getFloat64(152, isLittleEndian),\n    toSemiMinorAxis: view.getFloat64(168, isLittleEndian)\n  };\n}\n\nfunction decodeString(view, start, end) {\n  return String.fromCharCode.apply(null, new Uint8Array(view.buffer.slice(start, end)));\n}\n\nfunction readSubgrids(view, header, isLittleEndian, includeErrorFields) {\n  var gridOffset = 176;\n  var grids = [];\n  for (var i = 0; i < header.nSubgrids; i++) {\n    var subHeader = readGridHeader(view, gridOffset, isLittleEndian);\n    var nodes = readGridNodes(view, gridOffset, subHeader, isLittleEndian, includeErrorFields);\n    var lngColumnCount = Math.round(\n      1 + (subHeader.upperLongitude - subHeader.lowerLongitude) / subHeader.longitudeInterval);\n    var latColumnCount = Math.round(\n      1 + (subHeader.upperLatitude - subHeader.lowerLatitude) / subHeader.latitudeInterval);\n    // Proj4 operates on radians whereas the coordinates are in seconds in the grid\n    grids.push({\n      ll: [secondsToRadians(subHeader.lowerLongitude), secondsToRadians(subHeader.lowerLatitude)],\n      del: [secondsToRadians(subHeader.longitudeInterval), secondsToRadians(subHeader.latitudeInterval)],\n      lim: [lngColumnCount, latColumnCount],\n      count: subHeader.gridNodeCount,\n      cvs: mapNodes(nodes)\n    });\n    var rowSize = 16;\n    if (includeErrorFields === false) {\n      rowSize = 8;\n    }\n    gridOffset += 176 + subHeader.gridNodeCount * rowSize;\n  }\n  return grids;\n}\n\n/**\n * @param {*} nodes\n * @returns Array<Array<number>>\n */\nfunction mapNodes(nodes) {\n  return nodes.map(function (r) {\n    return [secondsToRadians(r.longitudeShift), secondsToRadians(r.latitudeShift)];\n  });\n}\n\nfunction readGridHeader(view, offset, isLittleEndian) {\n  return {\n    name: decodeString(view, offset + 8, offset + 16).trim(),\n    parent: decodeString(view, offset + 24, offset + 24 + 8).trim(),\n    lowerLatitude: view.getFloat64(offset + 72, isLittleEndian),\n    upperLatitude: view.getFloat64(offset + 88, isLittleEndian),\n    lowerLongitude: view.getFloat64(offset + 104, isLittleEndian),\n    upperLongitude: view.getFloat64(offset + 120, isLittleEndian),\n    latitudeInterval: view.getFloat64(offset + 136, isLittleEndian),\n    longitudeInterval: view.getFloat64(offset + 152, isLittleEndian),\n    gridNodeCount: view.getInt32(offset + 168, isLittleEndian)\n  };\n}\n\nfunction readGridNodes(view, offset, gridHeader, isLittleEndian, includeErrorFields) {\n  var nodesOffset = offset + 176;\n  var gridRecordLength = 16;\n\n  if (includeErrorFields === false) {\n    gridRecordLength = 8;\n  }\n\n  var gridShiftRecords = [];\n  for (var i = 0; i < gridHeader.gridNodeCount; i++) {\n    var record = {\n      latitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength, isLittleEndian),\n      longitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength + 4, isLittleEndian)\n\n    };\n\n    if (includeErrorFields !== false) {\n      record.latitudeAccuracy = view.getFloat32(nodesOffset + i * gridRecordLength + 8, isLittleEndian);\n      record.longitudeAccuracy = view.getFloat32(nodesOffset + i * gridRecordLength + 12, isLittleEndian);\n    }\n\n    gridShiftRecords.push(record);\n  }\n  return gridShiftRecords;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}